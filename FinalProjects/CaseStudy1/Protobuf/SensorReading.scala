// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package sensor.sensor_readings

@SerialVersionUID(0L)
final case class SensorReading(
    sensorId: _root_.scala.Predef.String = "",
    timestamp: _root_.scala.Long = 0L,
    temperature: _root_.scala.Float = 0.0f,
    humidity: _root_.scala.Float = 0.0f,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[SensorReading] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = sensorId
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      
      {
        val __value = timestamp
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(2, __value)
        }
      };
      
      {
        val __value = temperature
        if (__value != 0.0f) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeFloatSize(3, __value)
        }
      };
      
      {
        val __value = humidity
        if (__value != 0.0f) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeFloatSize(4, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = sensorId
        if (!__v.isEmpty) {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = timestamp
        if (__v != 0L) {
          _output__.writeInt64(2, __v)
        }
      };
      {
        val __v = temperature
        if (__v != 0.0f) {
          _output__.writeFloat(3, __v)
        }
      };
      {
        val __v = humidity
        if (__v != 0.0f) {
          _output__.writeFloat(4, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def withSensorId(__v: _root_.scala.Predef.String): SensorReading = copy(sensorId = __v)
    def withTimestamp(__v: _root_.scala.Long): SensorReading = copy(timestamp = __v)
    def withTemperature(__v: _root_.scala.Float): SensorReading = copy(temperature = __v)
    def withHumidity(__v: _root_.scala.Float): SensorReading = copy(humidity = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = sensorId
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = timestamp
          if (__t != 0L) __t else null
        }
        case 3 => {
          val __t = temperature
          if (__t != 0.0f) __t else null
        }
        case 4 => {
          val __t = humidity
          if (__t != 0.0f) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(sensorId)
        case 2 => _root_.scalapb.descriptors.PLong(timestamp)
        case 3 => _root_.scalapb.descriptors.PFloat(temperature)
        case 4 => _root_.scalapb.descriptors.PFloat(humidity)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: sensor.sensor_readings.SensorReading.type = sensor.sensor_readings.SensorReading
    // @@protoc_insertion_point(GeneratedMessage[sensor.SensorReading])
}

object SensorReading extends scalapb.GeneratedMessageCompanion[sensor.sensor_readings.SensorReading] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[sensor.sensor_readings.SensorReading] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): sensor.sensor_readings.SensorReading = {
    var __sensorId: _root_.scala.Predef.String = ""
    var __timestamp: _root_.scala.Long = 0L
    var __temperature: _root_.scala.Float = 0.0f
    var __humidity: _root_.scala.Float = 0.0f
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __sensorId = _input__.readStringRequireUtf8()
        case 16 =>
          __timestamp = _input__.readInt64()
        case 29 =>
          __temperature = _input__.readFloat()
        case 37 =>
          __humidity = _input__.readFloat()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    sensor.sensor_readings.SensorReading(
        sensorId = __sensorId,
        timestamp = __timestamp,
        temperature = __temperature,
        humidity = __humidity,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[sensor.sensor_readings.SensorReading] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      sensor.sensor_readings.SensorReading(
        sensorId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        timestamp = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        temperature = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Float]).getOrElse(0.0f),
        humidity = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Float]).getOrElse(0.0f)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SensorReadingsProto.javaDescriptor.getMessageTypes().get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SensorReadingsProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = sensor.sensor_readings.SensorReading(
    sensorId = "",
    timestamp = 0L,
    temperature = 0.0f,
    humidity = 0.0f
  )
  implicit class SensorReadingLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, sensor.sensor_readings.SensorReading]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, sensor.sensor_readings.SensorReading](_l) {
    def sensorId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.sensorId)((c_, f_) => c_.copy(sensorId = f_))
    def timestamp: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.timestamp)((c_, f_) => c_.copy(timestamp = f_))
    def temperature: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Float] = field(_.temperature)((c_, f_) => c_.copy(temperature = f_))
    def humidity: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Float] = field(_.humidity)((c_, f_) => c_.copy(humidity = f_))
  }
  final val SENSORID_FIELD_NUMBER = 1
  final val TIMESTAMP_FIELD_NUMBER = 2
  final val TEMPERATURE_FIELD_NUMBER = 3
  final val HUMIDITY_FIELD_NUMBER = 4
  def of(
    sensorId: _root_.scala.Predef.String,
    timestamp: _root_.scala.Long,
    temperature: _root_.scala.Float,
    humidity: _root_.scala.Float
  ): _root_.sensor.sensor_readings.SensorReading = _root_.sensor.sensor_readings.SensorReading(
    sensorId,
    timestamp,
    temperature,
    humidity
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[sensor.SensorReading])
}
